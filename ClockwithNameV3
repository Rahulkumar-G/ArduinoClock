#include <WiFiS3.h>
#include <WiFiUdp.h>
#include <NTPClient.h>
#include <FastLED.h>
#include <TimeLib.h>          // Include the Time library
#include "arduino_secrets.h"  // Contains your Wi-Fi credentials

#define LED_PIN       6
#define MATRIX_WIDTH  32  // Number of columns
#define MATRIX_HEIGHT 8   // Number of rows
#define NUM_LEDS      (MATRIX_WIDTH * MATRIX_HEIGHT)
#define COLOR_ORDER   GRB

CRGB leds[NUM_LEDS];

// Wi-Fi credentials (stored in arduino_secrets.h)
char ssid[] = SECRET_SSID;
char pass[] = SECRET_PASS;

// Timezone offset for your local time zone (adjust as needed)
// For California, use UTC-8 for PST and UTC-7 for PDT
const long utcOffsetInSeconds = -8 * 3600; // PST (Standard Time)

// NTP client to get time
WiFiUDP ntpUDP;
NTPClient timeClient(ntpUDP, "pool.ntp.org", 0, 60000);  // UTC time, update every minute

// Web server on port 80
WiFiServer server(80);

// Zigzag XY mapping function for the 8x32 matrix
uint16_t XY(uint8_t x, uint8_t y) {
  if (x >= MATRIX_WIDTH || y >= MATRIX_HEIGHT) {
    return NUM_LEDS; // Invalid index
  }
  // Even columns light top to bottom, odd columns light bottom to top
  if (x % 2 == 0) {
    return (x * MATRIX_HEIGHT) + y;
  } else {
    return (x * MATRIX_HEIGHT) + (MATRIX_HEIGHT - 1 - y);
  }
}

// 5x7 pixel digit bitmaps for time display
const uint8_t PROGMEM digitBitmaps[10][5] = {
  {0x1F, 0x11, 0x11, 0x11, 0x1F}, // 0
  {0x00, 0x00, 0x00, 0x00, 0x1F}, // 1
  {0x1D, 0x15, 0x15, 0x15, 0x17}, // 2
  {0x11, 0x15, 0x15, 0x15, 0x1F}, // 3
  {0x07, 0x04, 0x04, 0x04, 0x1F}, // 4
  {0x17, 0x15, 0x15, 0x15, 0x1D}, // 5
  {0x1F, 0x15, 0x15, 0x15, 0x1D}, // 6
  {0x01, 0x01, 0x01, 0x01, 0x1F}, // 7
  {0x1F, 0x15, 0x15, 0x15, 0x1F}, // 8
  {0x17, 0x15, 0x15, 0x15, 0x1F}  // 9
};

// Shape definitions
const uint8_t R_shape[8][6] PROGMEM = {
  {1,1,1,1,1,0},
  {1,0,0,0,0,1},
  {1,0,0,0,0,1},
  {1,1,1,1,1,0},
  {1,0,0,1,0,0},
  {1,0,0,0,1,0},
  {1,0,0,0,0,1},
  {1,0,0,0,0,1},
};

const uint8_t Heart_shape[8][6] PROGMEM = {
  {0,1,0,0,1,0},
  {1,1,1,1,1,1},
  {1,1,1,1,1,1},
  {1,1,1,1,1,1},
  {0,1,1,1,1,0},
  {0,0,1,1,0,0},
  {0,0,1,1,0,0},
  {0,0,0,0,0,0},
};

const uint8_t J_shape[8][6] PROGMEM = {
  {1,1,1,1,1,1},
  {0,0,0,0,0,1},
  {0,0,0,0,0,1},
  {0,0,0,0,0,1},
  {0,0,0,0,0,1},
  {1,0,0,0,0,1},
  {1,1,1,1,1,0},
  {0,1,1,1,0,0},
};

// Time variables
unsigned long previousMillis = 0;
const long interval = 1000; // Update interval for the clock display

// User-controlled variables
uint8_t globalHue = 0;          // Hue for the display color
uint8_t globalSaturation = 255; // Saturation for the display color
uint8_t globalBrightness = 100; // Brightness level (0-255)

// Function prototypes
void displayDigit(int digit, int xOffset, int yOffset, CRGB color);
void displayColon(int xOffset, int yOffset, bool showColon, CRGB color);
void displayTime(int hour, int minute, bool showColon, CRGB color);
void writeShape(int start_col, const uint8_t shape[8][6], CRGB color);
void updateNTPTime();
void drawShapes();
void setupWiFi();
void setupLEDs();
void handleClient();
void drawShootingStar();
void updateTime();
bool isDST(unsigned long epochTime);
void displayClock();

void setup() {
  Serial.begin(115200);
  setupLEDs();
  setupWiFi();
  timeClient.begin();
  server.begin();
  Serial.println("HTTP server started");
}

void loop() {
  handleClient(); // Handle web server requests

  updateTime(); // Update time if necessary

  // Do not clear the display here to allow for trailing effects
  // The clock and shapes will overwrite their display areas
  displayClock();

  drawShapes();

  drawShootingStar();

  FastLED.show();
}

void setupLEDs() {
  FastLED.addLeds<WS2812B, LED_PIN, COLOR_ORDER>(leds, NUM_LEDS);
  FastLED.setBrightness(globalBrightness);
}

void setupWiFi() {
  Serial.println("Connecting to Wi-Fi...");
  WiFi.begin(ssid, pass);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\nConnected!");
  Serial.print("IP Address: ");
  Serial.println(WiFi.localIP());
}

void handleClient() {
  WiFiClient client = server.available();
  if (client) {
    Serial.println("New client connected");
    String currentLine = "";
    String httpRequest = "";

    while (client.connected()) {
      if (client.available()) {
        char c = client.read();
        httpRequest += c;

        if (c == '\n') {
          if (currentLine.length() == 0) {
            // End of headers
            // Parse GET parameters
            int colorIndex = httpRequest.indexOf("color=");
            int brightnessIndex = httpRequest.indexOf("brightness=");
            if (colorIndex != -1) {
              int ampIndex = httpRequest.indexOf('&', colorIndex);
              String colorValueStr;
              if (ampIndex != -1) {
                colorValueStr = httpRequest.substring(colorIndex + 6, ampIndex);
              } else {
                colorValueStr = httpRequest.substring(colorIndex + 6);
              }
              // URL decode if necessary
              colorValueStr.replace("%23", ""); // Remove '%23' which is URL-encoded '#'
              colorValueStr.replace("#", "");   // Remove '#' if it exists

              // Convert hex color to RGB
              uint32_t colorValue = (uint32_t) strtol(colorValueStr.c_str(), NULL, 16);
              uint8_t r = (colorValue >> 16) & 0xFF;
              uint8_t g = (colorValue >> 8) & 0xFF;
              uint8_t b = colorValue & 0xFF;
              // Convert RGB to HSV
              CHSV hsv = rgb2hsv_approximate(CRGB(r, g, b));
              globalHue = hsv.hue;
              globalSaturation = hsv.sat;
            }
            if (brightnessIndex != -1) {
              int ampIndex = httpRequest.indexOf('&', brightnessIndex);
              String brightnessValueStr;
              if (ampIndex != -1) {
                brightnessValueStr = httpRequest.substring(brightnessIndex + 11, ampIndex);
              } else {
                brightnessValueStr = httpRequest.substring(brightnessIndex + 11);
              }
              globalBrightness = constrain(brightnessValueStr.toInt(), 0, 255);
              FastLED.setBrightness(globalBrightness);
            }

            // Send HTTP response
            client.println("HTTP/1.1 200 OK");
            client.println("Content-Type: text/html");
            client.println("Connection: close");
            client.println();

            // HTML content
            client.println("<!DOCTYPE HTML>");
            client.println("<html>");
            client.println("<head><meta name='viewport' content='width=device-width, initial-scale=1'>");
            client.println("<style>");
            client.println("body { font-family: Arial, sans-serif; text-align: center; }");
            client.println("h1 { color: #333; }");
            client.println("input[type='color'] { width: 100px; height: 50px; border: none; }");
            client.println("input[type='range'] { width: 80%; }");
            client.println("button { padding: 10px 20px; font-size: 16px; }");
            client.println("</style>");
            client.println("</head>");
            client.println("<body>");
            client.println("<h1>LED Matrix Control</h1>");
            client.println("<form method='GET'>");

            // Convert current HSV color to RGB
            CRGB rgbColor;
            hsv2rgb_rainbow(CHSV(globalHue, globalSaturation, 255), rgbColor);

            // Format rgbColor into a hex string
            char colorHex[7];
            snprintf(colorHex, sizeof(colorHex), "%02X%02X%02X", rgbColor.r, rgbColor.g, rgbColor.b);

            client.println("<label for='color'>Select Color:</label><br>");
            client.println("<input type='color' id='color' name='color' value='#" + String(colorHex) + "'><br><br>");
            client.println("<label for='brightness'>Brightness:</label><br>");
            client.println("<input type='range' id='brightness' name='brightness' min='0' max='255' value='" + String(globalBrightness) + "'><br><br>");
            client.println("<button type='submit'>Update</button>");
            client.println("</form>");
            client.println("</body>");
            client.println("</html>");
            break;
          } else {
            currentLine = "";
          }
        } else if (c != '\r') {
          currentLine += c;
        }
      }
    }
    delay(1);
    client.stop();
    Serial.println("Client disconnected");
  }
}

void updateNTPTime() {
  timeClient.update();
}

void updateTime() {
  static unsigned long lastNTPUpdate = 0;
  unsigned long currentMillis = millis();

  if (currentMillis - lastNTPUpdate >= 60000) { // Update NTP every minute
    lastNTPUpdate = currentMillis;
    updateNTPTime();
  }
}

void displayClock() {
  unsigned long epochTime = timeClient.getEpochTime();

  // Adjust for UTC offset
  time_t localTime = epochTime + utcOffsetInSeconds;

  // Adjust for DST if applicable
  if (isDST(localTime)) {
    localTime += 3600; // Add one hour for DST
  }

  // Break down time into components
  tmElements_t tm;
  breakTime(localTime, tm);

  int hour = tm.Hour;
  int minute = tm.Minute;
  int second = tm.Second;

  CRGB color = CHSV(globalHue, globalSaturation, 255);

  // Display the time
  displayTime(hour, minute, second % 2 == 0, color);
}

bool isDST(unsigned long epochTime) {
  // Adjust for local time zone
  time_t localTime = epochTime;
  tmElements_t tm;
  breakTime(localTime, tm);

  int day = tm.Day;
  int month = tm.Month;
  int year = tmYearToCalendar(tm.Year); // Convert from offset to full year
  int hour = tm.Hour;
  int wday = tm.Wday; // Day of week (Sunday=1, Saturday=7)

  // DST starts at 2 AM on the second Sunday in March
  // DST ends at 2 AM on the first Sunday in November

  // Calculate the second Sunday in March
  int marchDay = (14 - (1 + year * 5 / 4) % 7);
  // Calculate the first Sunday in November
  int novemberDay = (7 - (1 + year * 5 / 4) % 7);

  if (month < 3 || month > 11) {
    return false; // Not DST
  } else if (month > 3 && month < 11) {
    return true; // DST
  } else if (month == 3) {
    if (day > marchDay || (day == marchDay && hour >= 2)) {
      return true; // DST
    } else {
      return false; // Not DST
    }
  } else if (month == 11) {
    if (day < novemberDay || (day == novemberDay && hour < 2)) {
      return true; // DST
    } else {
      return false; // Not DST
    }
  }
  return false; // Default
}

void drawShapes() {
  static uint8_t shapeIndex = 0;
  static unsigned long lastShapeChange = 0;
  const unsigned long shapeInterval = 3000; // Change shape every 3 seconds
  unsigned long currentMillis = millis();

  // Draw over previous shape to prevent ghosting
  static uint8_t lastShapeIndex = 0;
  if (shapeIndex != lastShapeIndex) {
    // Clear previous shape area
    for (int row = 0; row < 8; row++) {
      for (int col = 26; col < 32; col++) {
        leds[XY(col, row)] = CRGB::Black;
      }
    }
    lastShapeIndex = shapeIndex;
  }

  if (currentMillis - lastShapeChange >= shapeInterval) {
    lastShapeChange = currentMillis;
    shapeIndex = (shapeIndex + 1) % 3; // Cycle through shapes
  }

  CRGB color = CHSV((millis() / 10) % 255, 255, 255); // Smooth color transition

  switch (shapeIndex) {
    case 0:
      writeShape(26, R_shape, color);
      break;
    case 1:
      writeShape(26, Heart_shape, color);
      break;
    case 2:
      writeShape(26, J_shape, color);
      break;
  }
}

void drawShootingStar() {
  static unsigned long previousMillis = 0;   // Stores last time shooting star was updated
  static int position = -20;                 // Current position of the shooting star (-20 means delay before starting)
  const int interval = 50;                   // Time between steps in milliseconds
  const uint8_t tail_fade_amount = 64;       // Fade amount for tail effect (0-255)
  unsigned long currentMillis = millis();

  // Fade the tail every time to create trailing effect
  fadeToBlackBy(leds, NUM_LEDS, tail_fade_amount);

  if (currentMillis - previousMillis >= interval) {
    previousMillis = currentMillis;

    if (position >= 0 && position < MATRIX_WIDTH) {
      // Draw current shooting star pixel
      int x = position;
      int y = 7; // Row 7 (bottom row)
      CRGB color = CRGB::White;
      leds[XY(x, y)] = color;

      position++;
    } else {
      // Shooting star has reached the end or is in delay
      position++;
      if (position >= MATRIX_WIDTH + 20) {
        position = -20; // Reset position to delay before next shooting star
      }
    }
  }
}

void writeShape(int start_col, const uint8_t shape[8][6], CRGB color) {
  for (int row = 0; row < 8; row++) {
    for (int col = 0; col < 6; col++) {
      if (pgm_read_byte(&(shape[row][col]))) {
        int matrix_col = start_col + col;
        if (matrix_col < MATRIX_WIDTH) {
          leds[XY(matrix_col, row)] = color;
        }
      }
    }
  }
}

void displayDigit(int digit, int xOffset, int yOffset, CRGB color) {
  for (uint8_t x = 0; x < 5; x++) {
    uint8_t col = pgm_read_byte(&(digitBitmaps[digit][x]));
    for (uint8_t y = 0; y < 7; y++) {
      if (col & (1 << y)) {
        leds[XY(x + xOffset, y + yOffset)] = color;
      } else {
        // Clear pixel if not part of the digit
        leds[XY(x + xOffset, y + yOffset)] = CRGB::Black;
      }
    }
  }
}

void displayColon(int xOffset, int yOffset, bool showColon, CRGB color) {
  // Clear colon area first
  for (int y = yOffset; y < yOffset + 7; y++) {
    leds[XY(xOffset, y)] = CRGB::Black;
  }
  if (showColon) {
    leds[XY(xOffset, yOffset + 2)] = color;  // Upper dot of colon
    leds[XY(xOffset, yOffset + 4)] = color;  // Lower dot of colon
  }
}

void displayTime(int hour, int minute, bool showColon, CRGB color) {
  int displayHour = hour;
  if (hour == 0) {
    displayHour = 12;
  } else if (hour > 12) {
    displayHour = hour - 12;
  }

  int hourTens = displayHour / 10;
  int hourUnits = displayHour % 10;
  int minuteTens = minute / 10;
  int minuteUnits = minute % 10;

  // Clear previous digits by overwriting with black if necessary
  // Display digits with spacing
  if (hourTens > 0) {
    displayDigit(hourTens, 0, 0, color);
  } else {
    // Clear leading zero if hour is single digit
    for (int x = 0; x < 5; x++) {
      for (int y = 0; y < 7; y++) {
        leds[XY(x, y)] = CRGB::Black;
      }
    }
  }
  displayDigit(hourUnits, 6, 0, color);
  displayColon(12, 0, showColon, color);
  displayDigit(minuteTens, 14, 0, color);
  displayDigit(minuteUnits, 20, 0, color);
}
