#include <WiFiS3.h>
#include <WiFiUdp.h>
#include <NTPClient.h>
#include <FastLED.h>
#include <TimeLib.h>
#include <Timezone.h>
#include "arduino_secrets.h"  // Contains your Wi-Fi credentials

#define LED_PIN       6
#define MATRIX_WIDTH  32  // Number of columns
#define MATRIX_HEIGHT 8   // Number of rows
#define NUM_LEDS      (MATRIX_WIDTH * MATRIX_HEIGHT)
#define COLOR_ORDER   GRB

CRGB leds[NUM_LEDS];

// Heart color palette (shades of red and pink)
DEFINE_GRADIENT_PALETTE(heart_gp) {
  0,   255,  0,   0,    // Red
  128, 255, 105, 180,   // Hot Pink
  255, 255,  0,   0     // Red
};
CRGBPalette16 heartPalette = heart_gp;

// Wi-Fi credentials (stored in arduino_secrets.h)
char ssid[] = SECRET_SSID;
char pass[] = SECRET_PASS;

// Timezone rules for Pacific Time (USA)
TimeChangeRule PDT = {"PDT", Second, Sun, Mar, 2, -420};  // Daylight time = UTC - 7 hours
TimeChangeRule PST = {"PST", First, Sun, Nov, 2, -480};   // Standard time = UTC - 8 hours
Timezone tz(PDT, PST);

// NTP client to get time
WiFiUDP ntpUDP;
NTPClient timeClient(ntpUDP, "pool.ntp.org", 0, 60000);  // UTC time, update every minute

// Web server on port 80
WiFiServer server(80);

// XY mapping function for the 8x32 matrix
uint16_t XY(uint8_t x, uint8_t y) {
  if (x >= MATRIX_WIDTH || y >= MATRIX_HEIGHT) {
    return NUM_LEDS; // Return invalid index
  }
  // Even columns light top to bottom, odd columns light bottom to top
  if (x % 2 == 0) {
    return (x * MATRIX_HEIGHT) + y;
  } else {
    return (x * MATRIX_HEIGHT) + (MATRIX_HEIGHT - 1 - y);
  }
}

// Helper function to set pixels safely
void setPixel(uint8_t x, uint8_t y, CRGB color) {
  uint16_t index = XY(x, y);
  if (index < NUM_LEDS) {
    leds[index] = color;
  }
}

// 5x7 pixel digit bitmaps for time display (stored in PROGMEM)
const uint8_t PROGMEM digitBitmaps[10][5] = {
  {0x1F, 0x11, 0x11, 0x11, 0x1F}, // 0
  {0x00, 0x00, 0x00, 0x00, 0x1F}, // 1
  {0x1D, 0x15, 0x15, 0x15, 0x17}, // 2
  {0x11, 0x15, 0x15, 0x15, 0x1F}, // 3
  {0x07, 0x04, 0x04, 0x04, 0x1F}, // 4
  {0x17, 0x15, 0x15, 0x15, 0x1D}, // 5
  {0x1F, 0x15, 0x15, 0x15, 0x1D}, // 6
  {0x01, 0x01, 0x01, 0x01, 0x1F}, // 7
  {0x1F, 0x15, 0x15, 0x15, 0x1F}, // 8
  {0x17, 0x15, 0x15, 0x15, 0x1F}  // 9
};

// Shape definitions (stored in PROGMEM)
const uint8_t PROGMEM R_shape[8][6] = {
  {1,1,1,1,1,0},
  {1,0,0,0,0,1},
  {1,0,0,0,0,1},
  {1,1,1,1,1,0},
  {1,0,0,1,0,0},
  {1,0,0,0,1,0},
  {1,0,0,0,0,1},
  {1,0,0,0,0,1},
};

const uint8_t PROGMEM Heart_shape[8][6] = {
  {0,1,0,0,1,0},
  {1,1,1,1,1,1},
  {1,1,1,1,1,1},
  {1,1,1,1,1,1},
  {0,1,1,1,1,0},
  {0,0,1,1,0,0},
  {0,0,1,1,0,0},
  {0,0,0,0,0,0},
};

const uint8_t PROGMEM J_shape[8][6] = {
  {1,1,1,1,1,1},
  {0,0,0,0,0,1},
  {0,0,0,0,0,1},
  {0,0,0,0,0,1},
  {0,0,0,0,0,1},
  {1,0,0,0,0,1},
  {1,1,1,1,1,0},
  {0,1,1,1,0,0},
};

// HTML content stored in PROGMEM
const char index_html[] PROGMEM = R"rawliteral(
<!DOCTYPE HTML>
<html>
<head><meta name='viewport' content='width=device-width, initial-scale=1'>
<style>
body { font-family: Arial, sans-serif; text-align: center; background-color: #f0f0f0; }
h1 { color: #333; }
input[type='color'] { width: 100px; height: 50px; border: none; }
input[type='range'] { width: 80%; }
button { padding: 10px 20px; font-size: 16px; }
</style>
</head>
<body>
<h1>LED Matrix Control</h1>
<form method='GET'>
<label for='color'>Select Color:</label><br>
<input type='color' id='color' name='color' value='#FFFFFF'><br><br>
<label for='brightness'>Brightness:</label><br>
<input type='range' id='brightness' name='brightness' min='0' max='255' value='50'><br><br>
<button type='submit'>Update</button>
</form>
</body>
</html>
)rawliteral";

// Time variables
unsigned long previousMillis = 0;
const long interval = 1000; // Update interval for the clock display

// User-controlled variables
uint8_t globalHue = 0;          // Hue for the display color
uint8_t globalSaturation = 255; // Saturation for the display color
uint8_t globalBrightness = 50;  // Brightness level (0-255)
CRGB globalColor = CRGB::White; // Default color

// Fire color palette for the shooting star
CRGBPalette16 firePalette = HeatColors_p;

// Function prototypes
void displayDigit(int digit, int xOffset, int yOffset, CRGB color);
void displayColon(int xOffset, int yOffset, bool showColon, CRGB color);
void displayTime(int hour, int minute, bool showColon, CRGB color);
void writeShape(int start_col, const uint8_t shape[8][6], CRGB color);
void updateNTPTime();
void drawShapes();
void setupWiFi();
void setupLEDs();
void handleClient();
bool drawShootingStar();
void updateTime();
void displayClock();
bool shouldUpdateClock();
void sendHTMLContent(WiFiClient &client, const char *data);
void drawHeartWithHeartbeat();

void setup() {
  Serial.begin(115200);
  setupLEDs();
  setupWiFi();
  timeClient.begin();
  timeClient.update(); // Force initial update
  server.begin();
  Serial.println(F("HTTP server started"));
  Serial.print(F("Access the LED Matrix at: http://"));
  Serial.println(WiFi.localIP());
}

void loop() {
  bool displayUpdated = false;

  handleClient();
  updateTime();

  if (shouldUpdateClock()) {
    displayClock();
    displayUpdated = true;
  }

  // Update shapes every loop for smooth animations
  drawShapes();
  displayUpdated = true;

  // Update shooting star
  if (drawShootingStar()) {
    displayUpdated = true;
  }

  if (displayUpdated) {
    FastLED.show();
  }
}

void setupLEDs() {
  FastLED.addLeds<WS2812B, LED_PIN, COLOR_ORDER>(leds, NUM_LEDS);
  FastLED.setBrightness(globalBrightness);
}

void setupWiFi() {
  Serial.println(F("Connecting to Wi-Fi..."));
  WiFi.begin(ssid, pass);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(F("."));
  }
  Serial.println(F("\nConnected!"));
  Serial.print(F("IP Address: "));
  Serial.println(WiFi.localIP());
}

void handleClient() {
  WiFiClient client = server.available();
  if (client) {
    String request = client.readStringUntil('\r');
    client.flush();

    // Process GET parameters
    if (request.startsWith("GET /")) {
      int colorIndex = request.indexOf("color=");
      int brightnessIndex = request.indexOf("brightness=");

      if (colorIndex != -1) {
        String colorValueStr = request.substring(colorIndex + 6, colorIndex + 12);
        uint32_t colorValue = (uint32_t) strtol(colorValueStr.c_str(), NULL, 16);
        uint8_t r = (colorValue >> 16) & 0xFF;
        uint8_t g = (colorValue >> 8) & 0xFF;
        uint8_t b = colorValue & 0xFF;
        globalColor = CRGB(r, g, b);
      }

      if (brightnessIndex != -1) {
        int ampersandIndex = request.indexOf('&', brightnessIndex);
        String brightnessValueStr;
        if (ampersandIndex != -1) {
          brightnessValueStr = request.substring(brightnessIndex + 11, ampersandIndex);
        } else {
          brightnessValueStr = request.substring(brightnessIndex + 11);
        }
        int brightnessValue = brightnessValueStr.toInt();
        globalBrightness = constrain(brightnessValue, 0, 255);
        FastLED.setBrightness(globalBrightness);
      }
    }

    // Send HTTP response
    client.println(F("HTTP/1.1 200 OK"));
    client.println(F("Content-Type: text/html"));
    client.println(F("Connection: close"));
    client.println();
    sendHTMLContent(client, index_html);

    client.stop();
  }
}

// Corrected sendHTMLContent() function
void sendHTMLContent(WiFiClient &client, const char *data) {
  // Send data stored in PROGMEM to the client
  client.print(reinterpret_cast<const __FlashStringHelper *>(data));
}

void updateNTPTime() {
  timeClient.update();
}

void updateTime() {
  static unsigned long lastNTPUpdate = 0;
  unsigned long currentMillis = millis();

  if ((currentMillis - lastNTPUpdate >= 600000) || lastNTPUpdate == 0) { // Update every 10 minutes or on startup
    lastNTPUpdate = currentMillis;
    updateNTPTime();
  }
}

void displayClock() {
  time_t epochTime = timeClient.getEpochTime();

  // Convert UTC to local time
  time_t localTime = tz.toLocal(epochTime);

  // Break down time into components
  tmElements_t tm;
  breakTime(localTime, tm);

  int hour = tm.Hour;
  int minute = tm.Minute;
  int second = tm.Second;

  // Use globalColor for clock display
  CRGB color = globalColor;

  // Display the time
  displayTime(hour, minute, second % 2 == 0, color);
}

void drawShapes() {
  static uint8_t shapeIndex = 0;
  static unsigned long lastShapeChange = 0;
  const unsigned long shapeInterval = 3000; // Change shape every 3 seconds
  unsigned long currentMillis = millis();

  if (currentMillis - lastShapeChange >= shapeInterval) {
    // Clear previous shape area
    for (int row = 0; row < 8; row++) {
      for (int col = 26; col < 32; col++) {
        setPixel(col, row, CRGB::Black);
      }
    }

    lastShapeChange = currentMillis;
    shapeIndex = (shapeIndex + 1) % 3; // Cycle through shapes
  }

  switch (shapeIndex) {
    case 0:
      // R shape with normal color
      writeShape(26, R_shape, globalColor);
      break;
    case 1:
      // Heart shape with heartbeat effect
      drawHeartWithHeartbeat();
      break;
    case 2:
      // J shape with normal color
      writeShape(26, J_shape, globalColor);
      break;
  }
}

void drawHeartWithHeartbeat() {
  static unsigned long lastUpdate = 0;
  static float brightness = 150.0;
  static bool increasing = true;
  unsigned long currentMillis = millis();

  // Heartbeat interval
  if (currentMillis - lastUpdate >= 30) { // Adjust for speed
    lastUpdate = currentMillis;

    // Simulate heartbeat (pulsing brightness)
    if (increasing) {
      brightness += 5;
      if (brightness >= 255) {
        brightness = 255;
        increasing = false;
      }
    } else {
      brightness -= 5;
      if (brightness <= 150) {
        brightness = 150;
        increasing = true;
      }
    }
  }

  uint8_t scaledBrightness = (uint8_t)brightness;

  // Apply the brightness to the heart shape
  for (int row = 0; row < 8; row++) {
    for (int col = 0; col < 6; col++) {
      uint8_t pixel = pgm_read_byte(&(Heart_shape[row][col]));
      if (pixel) {
        int matrix_col = 26 + col;
        if (matrix_col < MATRIX_WIDTH) {
          // Get color from heart palette
          uint8_t colorIndex = map(row, 0, 7, 0, 255); // Vary color by row
          CRGB color = ColorFromPalette(heartPalette, colorIndex);
          color.nscale8_video(scaledBrightness); // Apply brightness scaling
          setPixel(matrix_col, row, color);
        }
      }
    }
  }
}

bool drawShootingStar() {
  static unsigned long previousMillis = 0;   // Stores last time shooting star was updated
  static float positionX = -10.0;            // Start from left outside the matrix
  const float speedX = 0.7;                  // Adjust speed as needed
  const int interval = 50;                   // Time between steps in milliseconds
  bool updated = false;
  unsigned long currentMillis = millis();

  // Fade only the area of the shooting star
  for (int x = 0; x < MATRIX_WIDTH; x++) {
    CRGB pixelColor = leds[XY(x, 7)];
    pixelColor.nscale8(250); // Slight fade
    leds[XY(x, 7)] = pixelColor;
  }

  if (currentMillis - previousMillis >= interval) {
    previousMillis = currentMillis;

    positionX += speedX;

    if (positionX < MATRIX_WIDTH + 10) {
      int posX = (int)positionX;
      // Create a trail with decreasing brightness and changing colors
      for (int i = 0; i < 20; i++) { // Adjust the length of the trail
        int trailPosX = posX - i;
        if (trailPosX >= 0 && trailPosX < MATRIX_WIDTH) {
          uint8_t colorIndex = map(i, 0, 19, 128, 255); // Adjust color index for palette
          CRGB color = ColorFromPalette(firePalette, colorIndex);
          uint8_t brightness = map(i, 0, 19, 255, 50); // Decrease brightness per step
          color.nscale8_video(brightness);
          setPixel(trailPosX, 7, color);
        }
      }
      updated = true;
    } else {
      positionX = -10.0; // Reset position for next shooting star
    }
  }
  return updated;
}

void writeShape(int start_col, const uint8_t shape[8][6], CRGB color) {
  for (int row = 0; row < 8; row++) {
    for (int col = 0; col < 6; col++) {
      uint8_t pixel = pgm_read_byte(&(shape[row][col]));
      if (pixel) {
        int matrix_col = start_col + col;
        if (matrix_col < MATRIX_WIDTH) {
          setPixel(matrix_col, row, color);
        }
      }
    }
  }
}

void displayDigit(int digit, int xOffset, int yOffset, CRGB color) {
  for (uint8_t x = 0; x < 5; x++) {
    uint8_t col = pgm_read_byte(&(digitBitmaps[digit][x]));
    for (uint8_t y = 0; y < 7; y++) {
      if (col & (1 << y)) {
        setPixel(x + xOffset, y + yOffset, color);
      }
      // Do not set pixels to black here to prevent blinking
    }
  }
}

void displayColon(int xOffset, int yOffset, bool showColon, CRGB color) {
  if (showColon) {
    setPixel(xOffset, yOffset + 2, color);  // Upper dot of colon
    setPixel(xOffset, yOffset + 4, color);  // Lower dot of colon
  } else {
    setPixel(xOffset, yOffset + 2, CRGB::Black);
    setPixel(xOffset, yOffset + 4, CRGB::Black);
  }
}

void displayTime(int hour, int minute, bool showColon, CRGB color) {
  int displayHour = hour;
  if (hour == 0) {
    displayHour = 12;
  } else if (hour > 12) {
    displayHour = hour - 12;
  }

  int hourTens = displayHour / 10;
  int hourUnits = displayHour % 10;
  int minuteTens = minute / 10;
  int minuteUnits = minute % 10;

  // Display digits with spacing
  if (hourTens > 0) {
    displayDigit(hourTens, 0, 0, color);
  } else {
    // Clear leading zero if hour is single digit
    for (int x = 0; x < 5; x++) {
      for (int y = 0; y < 7; y++) {
        setPixel(x, y, CRGB::Black);
      }
    }
  }
  displayDigit(hourUnits, 6, 0, color);
  displayColon(12, 0, showColon, color);
  displayDigit(minuteTens, 14, 0, color);
  displayDigit(minuteUnits, 20, 0, color);
}

bool shouldUpdateClock() {
  static unsigned long lastUpdate = 0;
  unsigned long currentMillis = millis();
  if (currentMillis - lastUpdate >= 1000) { // Update every second
    lastUpdate = currentMillis;
    return true;
  }
  return false;
}
